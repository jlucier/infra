---
- name: Watchtower
  tags:
    - containers
    - watchtower
  docker_container:
    name: watchtower
    image: containrrr/watchtower
    pull: true
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    restart_policy: unless-stopped

- name: CORS container
  tags:
    - containers
    - cors
  docker_container:
    name: cors
    pull: true
    image: imjacobclark/cors-container
    ports:
      - "{{ cors_http }}:3000"
    restart_policy: unless-stopped

- import_tasks: analytics.yml

- name: Jellyfin
  tags:
    - containers
    - jellyfin
  block:
    - name: Create and chmod folders
      become: true
      file:
        path: "{{ item }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        state: directory
        mode: 0755
        recurse: true
      with_items:
        - "{{ docker_dir }}/jellyfin/config"
        - "{{ docker_dir }}/jellyfin/cache"

    - name: Make sure the Jellyfin container is created and running
      docker_container:
        name: jellyfin
        image: "jellyfin/jellyfin"
        pull: true
        state: started
        networks:
          - name: host
        user: "{{ uid }}"
        volumes:
          - "{{ docker_dir }}/jellyfin/config:/config"
          - "{{ docker_dir }}/jellyfin/cache:/cache"
          - "/growingboi/media:/media"
        restart_policy: unless-stopped
        runtime: nvidia

- name: Homer
  tags:
    - containers
    - homer
  block:
    - name: Create and chmod folders
      become: true
      file:
        path: "{{ item }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        state: directory
        mode: 0755
        recurse: true
      with_items:
        - "{{ docker_dir }}/homer"

    - name: Homer icons
      copy:
        src: "files/homer/icons"
        dest: "{{ docker_dir }}/homer/"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: 0755
      notify: restart homer

    - name: Homer config
      template:
        src: "files/homer/config.yml"
        dest: "{{ docker_dir }}/homer/"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: 0755

    - name: Make sure the Homer container is created and running
      docker_container:
        name: homer
        image: "b4bz/homer"
        pull: true
        state: started
        ports:
          - "{{ homer_http }}:8080"
        user: "{{ uid }}"
        volumes:
          - "{{ docker_dir }}/homer:/www/assets"
        restart_policy: unless-stopped

- name: Pi-hole
  tags:
    - containers
    - pihole
  block:
    - name: Create and chmod folders
      become: true
      file:
        path: "{{ docker_dir }}/pihole"
        owner: root
        group: root
        state: directory
        mode: 0755
        recurse: true

    - name: Fix systemd-resolved
      become: true
      lineinfile:
        dest: "/etc/systemd/resolved.conf"
        regexp: "^DNSStubListener"
        line: "DNSStubListener=no"
        state: present
        mode: 0644
      register: resolved

    - name: Restart resolved
      when: resolved.changed
      become: true
      ansible.builtin.systemd:
        name: systemd-resolved
        state: restarted

    - name: Edit resolve.conf
      become: true
      ansible.builtin.file:
        src: /run/systemd/resolve/resolv.conf
        dest: /etc/resolv.conf
        state: link

    - name: Make sure the Pi-hole container is created and running
      docker_container:
        name: pihole
        image: "pihole/pihole"
        pull: true
        state: started
        ports:
          - "{{ pihole_http }}:80"
          - "{{ local_ip }}:53:53/tcp"
          - "{{ local_ip }}:53:53/udp"
        env:
          TZ: "America/New_York"
          VIRTUAL_HOST: "pi.hole"
          PROXY_LOCATION: "pi.hole"
          FTLCONF_LOCAL_IPV4: "{{ local_ip }}"
        hostname: "pi.hole"
        volumes:
          - "{{ docker_dir }}/pihole/etc-pihole:/etc/pihole"
          - "{{ docker_dir }}/pihole/etc-dnsmasq.d:/etc/dnsmasq.d"
        restart_policy: unless-stopped

- name: Unifi Controller
  tags:
    - containers
    - unifi
  block:
    - name: Create and chmod folders
      become: true
      file:
        path: "{{ item }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        state: directory
        mode: 0755
        recurse: true
      with_items:
        - "{{ docker_dir }}/unifi"

    - name: Install Unifi Controller
      docker_container:
        name: unifi
        image: "linuxserver/unifi-controller"
        pull: true
        state: started
        ports:
          - "{{ unifi_https }}:8443"
          - "{{ unifi_http }}:8080"
          - 3478:3478/udp
          - 10001:10001/udp
        env:
          "TZ": "America/New_York"
          "PUID": "1000"
          "PGID": "1000"
        volumes:
          - "{{ docker_dir }}/unifi:/config"
        restart_policy: unless-stopped

- name: SpeedtestTracker
  tags:
    - containers
    - speedtest
  block:
    - name: Create and chmod folders
      become: true
      file:
        path: "{{ item }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        state: directory
        mode: 0755
        recurse: true
      with_items:
        - "{{ docker_dir }}/speedtest"

    - name: Run speedtest tracker
      docker_container:
        name: speedtesttracker
        image: "ghcr.io/alexjustesen/speedtest-tracker"
        pull: true
        state: started
        env:
          "PUID": "1000"
          "PGID": "1000"
          "APP_KEY": '"{{ speedtesttracker_key }}"'
        ports:
          - "{{ speedtest_http }}:80"
          - "{{ speedtest_https }}:8443"
        volumes:
          - "{{ docker_dir }}/speedtest:/config"
        restart_policy: unless-stopped

- name: Syncthing
  tags:
    - containers
    - syncthing
  docker_container:
    name: syncthing
    image: "syncthing/syncthing"
    pull: true
    state: started
    env:
      "PUID": "1000"
      "PGID": "1000"
    networks:
      - name: host
    volumes:
      - "/growingboi/storage/syncthing:/var/syncthing"
    restart_policy: unless-stopped

- name: Torrent
  tags:
    - containers
    - torrent
  block:
    - name: Install the docker compose file
      become: true
      template:
        src: "files/torrent/docker-compose.yml"
        dest: "{{ docker_dir }}/qbittorrent/docker-compose.yml"
        owner: "{{ username }}"
        group: "{{ username }}"

    - name: Install torrent creds
      become: true
      copy:
        src: "files/torrent/wg0.conf"
        dest: "{{ docker_dir }}/qbittorrent/"
        mode: 0500

    - name: Run compose project
      docker_compose:
        project_src: "{{ docker_dir }}/qbittorrent/"

- import_tasks: gameservers.yml
