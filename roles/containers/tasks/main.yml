---
- name: Watchtower
  tags:
    - containers
    - watchtower
  docker_container:
    name: watchtower
    image: containrrr/watchtower
    pull: yes
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    restart_policy: unless-stopped


- name: CORS container
  tags:
    - containers
    - cors
  docker_container:
    name: cors
    pull: yes
    image: imjacobclark/cors-container
    ports:
      - "{{ cors_http }}:3000"
    restart_policy: unless-stopped

- name: Prometheus
  tags:
    - containers
    - prometheus
  block:
    - name: Create and chmod folders
      become: yes
      file:
        path: "{{ item }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        state: directory
        mode: 0755
        recurse: yes
      with_items:
        - "{{ docker_dir }}/prometheus/etc"
        - "{{ docker_dir }}/prometheus"

    - name: Install the Prometheus config
      template:
        src: files/prometheus.yml
        dest: "{{ docker_dir }}/prometheus/etc/prometheus.yml"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: 0755
      notify: restart prometheus

    - name: Make sure the Prometheus container is created and running
      docker_container:
        name: prometheus
        image: "prom/prometheus"
        pull: yes
        state: started
        networks:
          - name: host
        user: "{{ uid }}"
        env:
          "PUID": "{{ guid }}"
          "PGID": "{{ guid }}"
          "TZ": "{{ timezone }}"
        command:
          - "--config.file=/etc/prometheus/prometheus.yml"
          - "--storage.tsdb.path=/prometheus"
          - "--web.console.libraries=/usr/share/prometheus/console_libraries"
          - "--web.console.templates=/usr/share/prometheus/consoles"
        volumes:
          - "{{ docker_dir }}/prometheus/etc:/etc/prometheus"
          - "{{ docker_dir }}/prometheus:/prometheus"
        restart_policy: unless-stopped

- name: Grafana
  tags:
    - containers
    - grafana
  block:
    - name: Create and chmod Grafana folder
      become: yes
      file:
        path: "{{ docker_dir }}/grafana"
        owner: 472
        group: 0
        state: directory
        recurse: yes

    - name: Make sure the Grafana container is created and running
      docker_container:
        name: grafana
        image: "grafana/grafana:main"
        pull: yes
        networks:
          - name: host
        state: started
        user: "472"
        env:
          "TZ": "{{ timezone }}"
        volumes:
          - "{{ docker_dir }}/grafana:/var/lib/grafana"
        restart_policy: unless-stopped


- name: Make sure cAdvisor container is created and running
  tags:
    - containers
    - cadvisor
  docker_container:
    name: cadvisor
    image: gcr.io/cadvisor/cadvisor
    pull: yes
    state: started
    privileged: yes
    ports:
      - "{{ cadvisor_http }}:8080"
    devices:
      - /dev/kmsg
    volumes:
      - "{{ docker_dir }}/grafana:/var/lib/grafana"
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    restart_policy: unless-stopped


- name: Jellyfin
  tags:
    - containers
    - jellyfin
  block:
    - name: Create and chmod folders
      become: yes
      file:
        path: "{{ item }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        state: directory
        mode: 0755
        recurse: yes
      with_items:
        - "{{ docker_dir }}/jellyfin/config"
        - "{{ docker_dir }}/jellyfin/cache"

    - name: Make sure the Jellyfin container is created and running
      docker_container:
        name: jellyfin
        image: "jellyfin/jellyfin"
        pull: yes
        state: started
        networks:
          - name: host
        user: "{{ uid }}"
        volumes:
          - "{{ docker_dir }}/jellyfin/config:/config"
          - "{{ docker_dir }}/jellyfin/cache:/cache"
          - "/growingboi/media:/media"
        restart_policy: unless-stopped
        runtime: nvidia

- name: Homer
  tags:
    - containers
    - homer
  block:
    - name: Create and chmod folders
      become: yes
      file:
        path: "{{ item }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        state: directory
        mode: 0755
        recurse: yes
      with_items:
        - "{{ docker_dir }}/homer"

    - name: Homer icons
      copy:
        src: "files/homer/icons"
        dest: "{{ docker_dir }}/homer/"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: 0755
      notify: restart homer

    - name: Homer config
      template:
        src: "files/homer/config.yml"
        dest: "{{ docker_dir }}/homer/"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: 0755

    - name: Make sure the Homer container is created and running
      docker_container:
        name: homer
        image: "b4bz/homer"
        pull: yes
        state: started
        ports:
          - "{{ homer_http }}:8080"
        user: "{{ uid }}"
        volumes:
          - "{{ docker_dir }}/homer:/www/assets"
        restart_policy: unless-stopped

- name: Pi-hole
  tags:
    - containers
    - pihole
  block:
    - name: Create and chmod folders
      become: yes
      file:
        path: "{{ docker_dir }}/pihole"
        owner: root
        group: root
        state: directory
        mode: 0755
        recurse: yes

    - name: Fix systemd-resolved
      become: yes
      lineinfile:
        dest: "/etc/systemd/resolved.conf"
        regexp: "^DNSStubListener"
        line: "DNSStubListener=no"
        state: present
        mode: 0644
      register: resolved

    - name: Restart resolved
      when: resolved.changed
      become: yes
      ansible.builtin.systemd:
        name: systemd-resolved
        state: restarted

    - name: Edit resolve.conf
      become: yes
      ansible.builtin.file:
        src: /run/systemd/resolve/resolv.conf
        dest: /etc/resolv.conf
        state: link

    - name: Make sure the Pi-hole container is created and running
      docker_container:
        name: pihole
        image: "pihole/pihole"
        pull: yes
        state: started
        ports:
          - "{{ pihole_http }}:80"
          - "{{ local_ip }}:53:53/tcp"
          - "{{ local_ip }}:53:53/udp"
        env:
          TZ: "America/New_York"
          VIRTUAL_HOST: "pi.hole"
          PROXY_LOCATION: "pi.hole"
          FTLCONF_LOCAL_IPV4: "{{ local_ip }}"
        hostname: "pi.hole"
        volumes:
          - "{{ docker_dir }}/pihole/etc-pihole:/etc/pihole"
          - "{{ docker_dir }}/pihole/etc-dnsmasq.d:/etc/dnsmasq.d"
        restart_policy: unless-stopped

- name: Unifi Controller
  tags:
    - containers
    - unifi
  block:
    - name: Create and chmod folders
      become: yes
      file:
        path: "{{ item }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        state: directory
        mode: 0755
        recurse: yes
      with_items:
        - "{{ docker_dir }}/unifi"

    - name: Install Unifi Controller
      docker_container:
        name: unifi
        image: "linuxserver/unifi-controller"
        pull: yes
        state: started
        ports:
          - "{{ unifi_https }}:8443"
          - "{{ unifi_http }}:8080"
          - 3478:3478/udp
          - 10001:10001/udp
        env:
          "TZ": "America/New_York"
          "PUID": "1000"
          "PGID": "1000"
        volumes:
          - "{{ docker_dir }}/unifi:/config"
        restart_policy: unless-stopped

- name: SpeedtestTracker
  tags:
    - containers
    - speedtest
  block:
    - name: Create and chmod folders
      become: yes
      file:
        path: "{{ item }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        state: directory
        mode: 0755
        recurse: yes
      with_items:
        - "{{ docker_dir }}/speedtest"

    - name: Run speedtest tracker
      docker_container:
        name: speedtesttracker
        image: "ghcr.io/alexjustesen/speedtest-tracker"
        pull: yes
        state: started
        env:
          "PUID": "1000"
          "PGID": "1000"
        ports:
          - "{{ speedtest_http }}:80"
          - "{{ speedtest_https }}:8443"
        volumes:
          - "{{ docker_dir }}/speedtest:/config"
        restart_policy: unless-stopped

- name: Syncthing
  tags:
    - containers
    - syncthing
  docker_container:
    name: syncthing
    image: "syncthing/syncthing"
    pull: yes
    state: started
    env:
      "PUID": "1000"
      "PGID": "1000"
    networks:
      - name: host
    volumes:
      - "/growingboi/storage/syncthing:/var/syncthing"
    restart_policy: unless-stopped


- name: Tekkit server
  tags:
    - containers
    - tekkit
  block:
    - name: Install the docker compose project
      become: yes
      copy:
        src: files/tekkit
        dest: "{{ docker_dir }}/"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: 0755

    - name: Run server
      docker_compose:
        project_src: "{{ docker_dir }}/tekkit"
        build: true
